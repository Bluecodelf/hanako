openapi: 3.0.0
info:
  title: Hanako Users API
  description: Hanako API to create, get and manage users.
  version: 0.0.1-SNAPSHOT

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: The identifier of the user. Generated by the server, unique and non-modifiable.
        username:
          type: string
          maxLength: 32
          example: 'john.doe'
          description: The username of the user. Unique and at most 32 characters.
        email:
          type: string
          format: email
          maxLength: 512
          example: 'john.doe@example.com'
          description: The email of the user. Unique and at most 512 characters.
        civility:
          $ref: '#/components/schemas/Civility'
        firstName:
          type: string
          example: 'John'
          description: The first name of the user. At most 512 characters.
        lastName:
          type: string
          example: 'Doe'
          description: The last name of the user. At most 512 characters.
        displayName:
          type: string
          example: 'John Doe'
          description: The display name of the user. At most 2048 characters.
        password:
          type: string
          writeOnly: true
          example: 'sup3rS3cr3tP455w0rd'
          description: The password of the user. Plaintext and not readable.
        status:
          $ref: '#/components/schemas/Status'
    Civility:
      type: string
      enum:
        - MR
        - MS
        - MO
        - CI
        - CP
        - CO
        - GV
        - GL
      description: >
        The civility of the user, being one of the following:
         * `MR` - A male individual.
         * `MS` - A female individual.
         * `MO` - An individual identifying as neither male nor female.
         * `CI` - A one-person commercial entity (e.g. a freelance).
         * `CP` - A corporation or a business. In legal terms, this corresponds to a commercial partnership (LP and derivatives), a limited liability company (LLC and derivatives) or a corporation (Corp., Inc. and derivatives).
         * `CO` - A non-profit organization, foundation or association.
         * `GV` - A governmental entity, belonging to a recognized or unrecognized state.
         * `GL` - An official or non-official entity with a legal purpose, such as a tribunal or auditor.
      example: 'MR'
    Status:
      type: string
      enum:
        - STD
        - ADM
        - DSB
      description: >
        The status of the user, being one of the following:
         * `STD` - A standard user.
         * `ADM` - An administrator. This status means that the user will be able to bypass any user rights or groups system that might be used throughout the Tiwind Software ecosystem.
         * `DSB` - A disabled user. This status means that the user cannot log in or do any operational action.
      example: 'STD'
    UserErrorCode:
      type: string
      enum:
        - USERS.001
        - USERS.002
        - USERS.003
        - USERS.004
        - USERS.005
        - USERS.006
        - USERS.007
        - USERS.008
        - USERS.009
        - USERS.010
        - USERS.011
        - USERS.012
        - USERS.013
      description: >
        User error codes can have the following values:
         * `USERS.001`: A user's identifier cannot be manually set.
         * `USERS.002`: The given username already exists.
         * `USERS.003`: The given email is already used.
         * `USERS.004`: The given civility is unrecognized.
         * `USERS.005`: The given username is too long.
         * `USERS.006`: The given email is too long.
         * `USERS.007`: The given first name is too long.
         * `USERS.008`: The given last name is too long.
         * `USERS.009`: The given display name is too long.
         * `USERS.010`: The given status is unrecognized.
         * `USERS.011`: The user does not exists.
         * `USERS.012`: The given identifier is invalid.
         * `USERS.013`: The given email is invalid.
      example: 'USERS.001'
    UserError:
      type: object
      properties:
        code:
          oneOf:
            - $ref: './CORE.yaml#/components/schemas/CoreErrorCode'
            - $ref: '#/components/schemas/UserErrorCode'
          example: 'USERS.001'
        description:
          type: string
          description: A human readable description of whay went wrong with the request in details.
          example: 'A user''s identifier cannot be manually set. Remove it from the request and try again.'

paths:
  /users:
    get:
      summary: Return a list of users.
      description: Gets a list of users from Hanako, supporting pagination.
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
          required: false
          description: The maximum number of returned users.
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
            minimum: 0
          required: false
          description: The offset of the users to return.
      responses:
        '200':
          description: Successfully retrieved a list of users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: The user request is invalid.
          content:
            application/json:
              schema:
                $ref: './CORE.yaml#/components/schemas/CoreError'
        '500':
          description: There was an internal server error. This is a bug.
          content:
            application/json:
              schema:
                $ref: './CORE.yaml#/components/schemas/CoreError'
    post:
      summary: Create a new user.
      description: Creates a new user in the Hanako backend.
      requestBody:
        description: The payload used to create users.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Successfully created the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: The request is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserError'
        '409':
          description: One of the given attributes is unique and already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserError'
        '500':
          description: There was an internal server error. This is a bug.
          content:
            application/json:
              schema:
                $ref: './CORE.yaml#/components/schemas/CoreError'
  /users/{userId}:
    get:
      summary: Get a specific user.
      description: Gets a single user from Hanako.
      parameters:
        - in: path
          name: userId
          schema:
            type: uuid
          required: true
          description: The UUID of the user to get.
      responses:
        '200':
          description: The user with the given identifier has been retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: The request is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserError'
        '404':
          description: The user does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserError'
        '500':
          description: There was an internal server error. This is a bug.
          content:
            application/json:
              schema:
                $ref: './CORE.yaml#/components/schemas/CoreError'
    patch:
      summary: Partially modify a specific user.
      description: Partially modifies a specific user in Hanako.
      parameters:
        - in: path
          name: userId
          schema:
            type: uuid
          required: true
          description: The UUID of the user to modify.
      responses:
        '200':
          description: The user with the given identifier has been modified.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: The user request is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserError'
        '404':
          description: The user does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserError'
        '409':
          description: One of the given attributes is unique and already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserError'
        '500':
          description: There was an internal server error. This is a bug.
          content:
            application/json:
              schema:
                $ref: './CORE.yaml#/components/schemas/CoreError'
    put:
      summary: Completely modify a specific user.
      description: Completely modifies a specific user in Hanako. Note that fields that are not present will be removed.
      parameters:
        - in: path
          name: userId
          schema:
            type: uuid
          required: true
          description: The UUID of the user to modify.
      responses:
        '200':
          description: The user with the given identifier has been modified.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: The user request is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserError'
        '404':
          description: The user does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserError'
        '409':
          description: One of the given attributes is unique and already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserError'
        '500':
          description: There was an internal server error. This is a bug.
          content:
            application/json:
              schema:
                $ref: './CORE.yaml#/components/schemas/CoreError'
    delete:
      summary: Delete a specific user.
      description: Deletes a specific user in Hanako.
      parameters:
        - in: path
          name: userId
          schema:
            type: uuid
          required: true
          description: The UUID of the user to delete.
      responses:
        '204':
          description: The user with the given identifier has been deleted.
        '400':
          description: The user request is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserError'
        '404':
          description: The user does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserError'
        '500':
          description: There was an internal server error. This is a bug.
          content:
            application/json:
              schema:
                $ref: './CORE.yaml#/components/schemas/CoreError'
